{"version":3,"sources":["Crawl.module.css","Crawl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","fade","starWars","pre","crawl","stopCrawl","Crawl","_ref","title","openingCrawl","openingCrawlText","onCrawlEnd","react_default","a","createElement","react","id","className","styles","onAnimationEnd","dataFetchReducer","state","action","type","Object","objectSpread","isLoading","isError","data","payload","Error","App","emptyFilm","characters","created","director","edited","episode_id","opening_crawl","planets","producer","release_date","species","starships","url","vehicles","fetchState","initialFilms","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","didCancel","asyncToGenerator","regenerator_default","mark","_callee","res","jsonRes","results","wrap","_context","prev","next","fetch","sent","json","t0","console","error","stop","apply","this","arguments","fetchData","useSwapi","_useState","useState","_useState2","_useState2$","setFilm","_useState3","_useState4","startCrawl","options","map","option","value","label","film","selectStyles","menu","zIndex","react_select_browser_esm","classNamePrefix","defaultValue","onChange","filmOption","Array","isArray","Crawl_Crawl","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c83eaf29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"fade\":\"Crawl_fade__16B6i\",\"starWars\":\"Crawl_starWars__2lo8y\",\"pre\":\"Crawl_pre__17cyi\",\"crawl\":\"Crawl_crawl__3YH1B\",\"stopCrawl\":\"Crawl_stopCrawl__2yUb8\"};","import React, { Fragment } from \"react\";\n\nimport styles from \"./Crawl.module.css\";\n\ninterface CrawlProps {\n  title: string;\n  openingCrawlText: string;\n  crawl: boolean;\n  onCrawlEnd: () => void;\n}\n\n//   <div className={styles.fade} />\n\nexport const Crawl: React.SFC<CrawlProps> = ({\n  title,\n  openingCrawlText: openingCrawl,\n  crawl: fade,\n  onCrawlEnd\n}) => {\n  return (\n    <Fragment>\n      <div id=\"fade\" className={styles.fade} />\n      <section className={styles.starWars}>\n        <article\n          className={fade ? styles.crawl : styles.stopCrawl}\n          onAnimationEnd={onCrawlEnd}\n        >\n          <h1>{title}</h1>\n          <pre className={styles.pre}>{openingCrawl}</pre>\n        </article>\n      </section>\n    </Fragment>\n  );\n};\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport Select from \"react-select\";\nimport { ValueType } from \"react-select/src/types\";\n\nimport { Crawl } from \"./Crawl\";\n// import \"./App.css\";\n\nimport { Film } from \"./films.d\";\n\n// Need this for Array.isArray to work with typescrip readonly arrays\n// relevent issue here: https://github.com/microsoft/TypeScript/issues/17002#issuecomment-494937708\ndeclare global {\n  interface ArrayConstructor {\n    isArray(arg: ReadonlyArray<any> | any): arg is ReadonlyArray<any>;\n  }\n}\n\ninterface FilmOption {\n  value: string;\n  label: string;\n  film: Film;\n}\n\ntype AppAction = {\n  type: \"FETCH_INIT\" | \"FETCH_SUCCESS\" | \"FETCH_FAILURE\";\n  payload: Film[];\n};\n\ntype AppState = {\n  isLoading: boolean;\n  isError: boolean;\n  data: Film[];\n};\n\nconst dataFetchReducer = (state: AppState, action: AppAction) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    default:\n      throw new Error();\n  }\n};\n\n/**\n * This sends a call to the Star Wars API\n * @param initialRoute See https://www.swapi.co/\n * @param initialFilms Initial film data\n */\nconst useSwapi = (initialFilms: Film[]) => {\n  const url = \"https://swapi.co/api/films/\";\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialFilms\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\", payload: [] });\n\n      try {\n        const res = await fetch(url);\n        const jsonRes = await res.json();\n\n        const results = jsonRes.results as Film[];\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_SUCCESS\", payload: results });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_FAILURE\", payload: [] });\n        }\n        console.error(err);\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [url]); // Only fire if the url changes, not on every render\n\n  return state;\n};\n\nconst App: React.FC = () => {\n  const emptyFilm: Film = {\n    characters: [],\n    created: \"\",\n    director: \"\",\n    edited: \"\",\n    episode_id: 0,\n    opening_crawl: \"\",\n    planets: [],\n    producer: \"\",\n    release_date: \"\",\n    species: [],\n    starships: [],\n    title: \"\",\n    url: \"\",\n    vehicles: []\n  };\n\n  const fetchState = useSwapi([emptyFilm]);\n\n  const [{ title, opening_crawl: openingCrawlText }, setFilm] = useState(\n    emptyFilm\n  );\n\n  const [crawl, startCrawl] = useState(false);\n\n  const { isError, isLoading, data } = fetchState;\n\n  const options: FilmOption[] = data.map(option => {\n    return {\n      value: option.title,\n      label: option.title,\n      film: option\n    };\n  });\n\n  const selectStyles = { menu: (styles: any) => ({ ...styles, zIndex: 2 }) };\n\n  return (\n    <div className=\"App\">\n      <Select\n        classNamePrefix=\"list\"\n        styles={selectStyles}\n        defaultValue={options[0]}\n        onChange={(filmOption: ValueType<FilmOption>) => {\n          if (!filmOption || Array.isArray(filmOption)) {\n            return;\n          }\n          const { film } = filmOption;\n\n          setFilm(film);\n          startCrawl(true);\n        }}\n        options={options}\n      />\n\n      {isError && <div>Something went wrong, try reloading.</div>}\n\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <Crawl\n          title={title}\n          openingCrawlText={openingCrawlText}\n          crawl={crawl}\n          onCrawlEnd={() => startCrawl(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}